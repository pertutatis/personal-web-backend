import { test, expect } from '@playwright/test'
import { AuthHelper } from '../helpers/auth.helper'
import { Logger } from '@/contexts/shared/infrastructure/Logger'

test.describe('Auth Debug', () => {
  test('should get auth debug info', async ({ request }) => {
    const debugResponse = await request.get('/api/debug/auth')
    expect(debugResponse.status()).toBe(200)

    const debugInfo = await debugResponse.json()
    Logger.info('Debug info received:', debugInfo)

    expect(debugInfo.env).toBe('development')
    expect(debugInfo.config.secret).toBe('test_secret')
    expect(debugInfo.generatedToken).toBeDefined()

    // Intentar usar el token generado
    const token = debugInfo.generatedToken
    Logger.info('Testing generated token:', { token })

    const response = await request.post('/api/backoffice/books', {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      data: {
        id: '123e4567-e89b-42d3-a456-426614174000',
        title: 'Test Book',
        author: 'Test Author',
        description: 'Test Description',
        isbn: '9780747532699',
        purchaseLink: 'https://example.com/book',
      },
    })

    Logger.info('Response from protected route:', {
      status: response.status(),
      headers: response.headers(),
      body: await response.text(),
    })

    expect(response.status()).toBe(201)
  })

  test('should validate auth helper token', async ({ request }) => {
    // Generar un token usando AuthHelper
    const token = await AuthHelper.generateToken()
    Logger.info('Token generated by AuthHelper:', { token })

    const response = await request.post('/api/backoffice/books', {
      headers: {
        Authorization: `Bearer ${token}`,
        'Content-Type': 'application/json',
      },
      data: {
        id: '123e4567-e89b-42d3-a456-426614174001',
        title: 'Test Book 2',
        author: 'Test Author 2',
        description: 'Test Description 2',
        isbn: '9780132350884',
        purchaseLink: 'https://example.com/book2',
      },
    })

    Logger.info('Response from protected route (AuthHelper token):', {
      status: response.status(),
      headers: response.headers(),
      body: await response.text(),
    })

    expect(response.status()).toBe(201)
  })
})
